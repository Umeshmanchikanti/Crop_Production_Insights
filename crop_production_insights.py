# -*- coding: utf-8 -*-
"""Crop_Production_Insights.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12GGIg7h8KFwwmBoc0jQmKaFDSNWGzbIv

**Access to Google Drive**
"""

from google.colab import drive
drive.mount('/content/drive')

"""**Importing necessary Libraries**"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""**Loading Data Set**"""

df=pd.read_csv("/content/drive/MyDrive/Crop Production data.csv")
df

"""**Checking the Variable Types**"""

df.info()

"""**Checking for Missing\Null Values**"""

df.isnull().sum()

100*df.isnull().mean()

"""**Dropping Production column**"""

df.drop("Production",axis=1)

"""**Top States in Agriculture Area**"""

Top_States=df.groupby('State_Name')['Area'].sum().sort_values(ascending=False).astype(int).head(15)
print(Top_States)

plt.figure(figsize=(10, 6))
sns.barplot(x=Top_States.values, y=Top_States.index, palette='Dark2')
for index, value in enumerate(Top_States):
    plt.text(value, index, f'{value:,}', va='center', ha='left')
plt.xlabel('Total Area')
plt.ylabel('State')
plt.title('Top States by Agriculture Area')
plt.gca().spines[['top', 'right']].set_visible(False)
plt.show()

"""**District wise Analysis**"""

df.District_Name.nunique()

df.District_Name.value_counts()

"""**Crop Year Analysis**"""

df.Crop_Year.value_counts()

df.Crop_Year.nunique()

"""**Seasonal Analysis**"""

df.Season.nunique()

season_counts=df.Season.value_counts()
print(season_counts)

plt.figure(figsize=(10, 6))
sns.barplot(x=season_counts.values, y=season_counts.index, palette='Dark2')
for index, value in enumerate(season_counts):
    plt.text(value, index, f'{value:,}', va='center', ha='left')
plt.xlabel('Count')
plt.ylabel('Season')
plt.title('Number of Entries by Season')
plt.gca().spines[['top', 'right']].set_visible(False)
plt.show()

"""**Crop Analysis**"""

df.Crop.nunique()

df.Crop.value_counts()

"""**Bivariate Analysis**"""

plt.figure(figsize=(15,10))
sns.barplot(x=df["Production"], y=df["State_Name"])

plt.figure(figsize=(15,10))
sns.barplot(x=df["Production"], y=df["Season"])

"""**Categorising Data Zone Wise**"""

North = ['Jammu and Kashmir', 'Punjab', 'Himachal Pradesh', 'Haryana', 'Uttarakhand', 'Uttar Pradesh', 'Chandigarh']
East = ['Bihar', 'Odisha', 'Jharkhand', 'West Bengal']
South = ['Andhra Pradesh', 'Karnataka', 'Kerala', 'Tamil Nadu','Telangana']
West = ['Rajasthan', 'Gujarat', 'Goa', 'Maharashtra']
Central_India = ['Madhya Pradesh', 'Chhattisgarh']
North_East=['Assam', 'Sikkim', 'Nagaland', 'Meghalaya', 'Manipur', 'Mizoram', 'Tripura', 'Arunachal Pradesh']
Union_Territories = ['Andaman and Nicobar Islands', 'Dadra and Nagar Haveli', 'Puducherry']
def zones_names (row):
    if row['State_Name'].strip() in North:
        val= 'North Zone'
    elif row['State_Name'].strip() in South:
        val= 'South Zone'
    elif row['State_Name'].strip() in East:
        val= 'East Zone'
    elif row['State_Name'].strip() in West:
        val= 'West Zone'
    elif row['State_Name'].strip() in Central_India:
        val= 'Central Zone'
    elif row['State_Name'].strip() in North_East:
        val= 'NorthEast Zone'
    elif row['State_Name'].strip() in Union_Territories:
        val= 'Union Territory'
    else:
        val = 'No Value'
    return val

df['zones'] = df.apply(zones_names, axis=1)
df.zones.value_counts()

"""**Categorising Crops**"""

crop=df['Crop']
def categ_crop(crop):
    if crop in ['Rice', 'Maize', 'Wheat', 'Barley', 'Varagu', 'Other Cereals & Millets', 'Ragi, Small millets', 'Bajra',
              'Jowar', 'Paddy', 'Total foodgrain', 'Jobster']:
        return 'Cereal'
    elif crop in ['Moong', 'Urad', 'Arhar/Tur', 'Peas & beans', 'Masoor', 'Other Kharif pulses', 'other misc.pulses',
              'Ricebean', 'Rajmash (nagadal)','Kholar', 'Lentil', 'Samai', 'Blackgram', 'Korra', 'Cowpea (Lobia)',
              'Other Rabi pulses', 'Other Kharif pulses', 'Peas & beans (Pulses)', 'Pulses total', 'Gram']:
        return 'Pulses'
    elif crop in ['Peach', 'Apple', 'Litchi', 'Pear', 'Plums', 'Ber', 'Sapota', 'Lemon', 'PomeGranet',
              'Other Citrus Fruit', 'Water Melon', 'JackFruit', 'Grapes', 'Pineapple', 'Orange',
              'Pome FruitCitrus Fruit', 'Other FreshFruits', 'Mango', 'Papaya', 'Coconut', 'Banana']:
        return 'Fruits'
    elif crop in ['Bean', 'Lab-Lab', 'Moth', 'Guar seed', 'Soyabean', 'Horse- gram']:
        return 'Beans'
    elif crop in ['Turnip', 'Peas', 'Beet Root', 'Carrot', 'Yam', 'Ribed Guard', 'Ash Gourd',
          'PumpKin', 'Redish', 'Snak Guard', 'Bottle Gourd', 'Bitter Gourd', 'Cucumber', 'Drum Stick',
          'Cauliflower', 'Beans & Mutter (Vegetable)', 'Cabbage', 'Bhindi', 'Tomato', 'Brinjal', 'Khesari',
          'Sweet potato', 'Potato', 'Onion', 'Tapioca', 'Colocosia']:
        return 'Vegetables'
    elif crop in ['Perilla', 'Ginger', 'Cardamom', 'Black pepper', 'Dry ginger, Garlic',
          'Coriander', 'Turmeric', 'Dry chillies', 'Cond-spcs other']:
        return 'spices'
    elif crop in ['other fibres', 'Kapas', 'Jute & mesta', 'Jute', 'Mesta', 'Cotton (lint)', 'Sannhamp']:
        return 'fibres'
    elif crop in ['Arcanut (Processed)', 'Atcanut (Raw)', 'Cashewnut Processed', 'Cashewnut Raw', 'Cashewnut', 'Arecanut', 'Groundnut']:
        return 'Nuts'
    elif crop in ['other oilseeds', 'Safflower', 'Niger seed', 'Castor seed', 'Linseed',
          'Sunflower', 'Rapeseed &Mustard', 'Sesamum', 'Oilseeds total']:
        return 'oilseeds'
    elif crop in ['Tobacco', 'Coffee', 'Tea', 'Sugarcane', 'Rubber']:
        return 'Commercial'
    else:
        return None

df['categ_crop'] = df['Crop'].apply(categ_crop)
df_filtered = df.dropna(subset=['categ_crop'])
df_filtered["categ_crop"].value_counts()

plt.figure(figsize=(15,10))
sns.barplot(x=df.zones, y=df.Production)
plt.yscale('log')
plt.title('Production by Zones')
plt.show()

"""**Analysing South Zone**"""

Southern_part=df[(df [ "zones"]=="South Zone")]
plt.figure(figsize=(15,10))
sns.barplot (x=Southern_part.State_Name,y=Southern_part. Production)
plt.yscale('log')
plt.title("South Zone Production")

"""**Analysing Union Territory Zone**"""

UT_part=df[(df [ "zones"]=="Union Territory")]
plt.figure(figsize=(15,10))
sns.barplot (x=UT_part.State_Name,y=UT_part.Production)
plt.yscale('log')
plt.title("UT Zone Production")

"""**Analysing North Zone**"""

Northern_part=df[(df [ "zones"]=="North Zone")]
plt.figure(figsize=(15,10))
sns.barplot (x=Northern_part.State_Name,y=Northern_part. Production)
plt.yscale('log')
plt.title("North Zone Production")

"""**Crop Production Prediction**"""

crop= df.groupby(by='Crop')['Production'].sum().reset_index().sort_values (by='Production',ascending=False).head (10)
crop
fig, ax = plt.subplots (figsize=(15,10))
sns.barplot(x=crop.Crop, y=crop. Production)
plt.yscale('log')
plt.title('Overall Crops vs Production')

"""**Season wise Production**"""

season= df.groupby(by='Season')['Production'].sum().reset_index().sort_values (by='Production',ascending=False).head (10)
season
fig, ax = plt.subplots (figsize=(15,10))
sns.barplot (x=season. Season, y=season. Production)
plt.yscale('log')
plt.title( 'Overall Crops vs Production')

"""**Multivariate Analysis**"""

plt.figure(figsize=(20,10))
sns.scatterplot(data=df, x=df.State_Name, y="categ_crop", hue="Season")
plt.xticks(rotation=90)
plt.show()

"""**END**"""